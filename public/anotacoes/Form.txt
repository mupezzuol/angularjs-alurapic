############################################## FORM


--------- GET STARTED
-> Podemos usar os 'ng-model' para os inputs, para usarmos o 'two-way data binding';
-> Usamos o 'ng-submit="submeter()"' na tag do 'form', para que quando houve um submit, ele chamará essa função,
essa função que estará na Controller.
Exemplo:
$scope.submeter = function () {
    console.log($scope.foto);
};


--------- INFORMAÇÕES
-> Adicionando o 'novalidate' na tag 'form' nós desabilitamos a validação do HTML5, para que o Angular trabalhe nisso;
Exemplo:
Se você colcoar o 'required' não será o HTML5 que irá validar, e sim o AngularJS, porém trataremos essas validações


--------- VALIDAÇÕES - 1
-> Usamos a diretiva 'ng-show' para validar, quando a condição dela retornar TRUE, ela apresenta o conteúdo onde ela está presente;
Exemplo:
<span ng-show="formulario.$submitted && formulario.url.$error.required" class="form-control alert-danger">
URL obrigatória
</span>

---- Explicação
-> Dentro de 'ng-show' nós passamos o 'name' do formulário + 'name' do input + a injeção do Angular $error.
-> Quando acessamos o '$error' podemos setar o que queremos validar, nesse caso validamos o 'required', se o campo foi preenchido
-> 'formulario.$submitted' faz a validação do submit do forumulário, se o formulário NÃO foi submetido ele é falso, portanto não aparece msg de erro
-> SE o formulário foi submetido && ele não foi preenchido, será apresentado esse span com erro.



--------- VALIDAÇÕES - 2
Exemplo:
<input name="titulo" class="form-control" ng-model="foto.titulo" required ng-maxlength="20">
<span ng-show="formulario.$submitted && formulario.titulo.$error.maxlength"
    class="form-control alert-danger">
        No máximo 20 caracteres!
</span>

---- Explicação
-> Usando a diretiva 'ng-maxlength="20"' privamos o campo para 20 caracteres, porém precisamos acrescentar isso na condição em 'ng-show'
-> Colocamos na condição 'formulario.titulo.$error.maxlength', se o Error encontrado for de maxlength ele retorna TRUE



--------- VALIDAÇÃO NO HTTP - MÉTODO POST
-> Usando '$scope.formulario.$valid' na controller, eu só faço a requisição se todos meus validadores tiverem OK, aí o $valid retornar TRUE
-> $valid é do escopo do angular para validar o formulário por completo


--------- VALIDAÇÃO NO BOTÃO SALVAR
-> Usando o 'ng-disabled="formulario.$invalid"' direto no botão, fazemos a seguinte validação:
    - Se o formulário tiver inválido, com qualquer validação errada, ele retornará TRUE, consequentemente o botão ficará DISABLE 
    - Se o formulário tiver válido, o retorno da condição será FALSE, portanto o botão ficará ENABLE


--------- VALIDAÇÃO DE MENSAGEM PARA O USUÁRIO
-> Usando 'ng-show="mensagem.length"' nós validamos, se for verdade a condição aparece a mensage, caso seja false ele não exibe;
-> ng-show retorna o conteúdo se for TRUE, se for FALSE ele não faz nada;
-> No JavaScript um objeto/var/array vazio é retornado como FALSE, e se tiver qualquer coisa como TRUE, por isso, se o conteúdo da variavel
'mensagem' conter algo, ele exibe a mensagem.



###############################################################################################################################################










############################################## REMOVER

-> $scope.fotos.indexOf(foto) Pego o indice da foto respectiva
-> $scope.fotos.splice(indiceDaFoto, 1) Deleto a foto respectiva... como o slice funciona:
- Passamos o indice para ser removido a partir do indice, e depois passamos quantos elementos ele irá remover, no caso 1 elemento só que é o indice passado
-> Dessa forma nossa lista de fotos do $scope será atualizada, e irá parecer q atualizamos a página sem fazer requisição

Exemplo:
$scope.remover = function(foto){
        /// URL -> v1/fotos/IDdaFotoQueDesejamosApagar
        $http.delete('/v1/fotos/' + foto._id)
        .success(function(){
            var indiceDaFoto = $scope.fotos.indexOf(foto);
            $scope.fotos.splice(indiceDaFoto, 1);//Deleto a foto a partir do índice X e peço para remover 1 elemento que seria a foto respectiva

            console.log('Foto ' + foto.titulo + ' removida com sucesso!');
        })
        .error(function(){
            console.log('Não foi possível apagar a foto ' + foto.titulo);
        });
    };
    ###############################################################################################################################################